{
  "posts": [
    {
      "id": "1",
      "title": "json-server",
      "userId": "1"
    },
    {
      "id": "2",
      "title": "json-server",
      "userId": "2"
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "Brother, I understand you. This digital jungle is annoying sometimes. But in the end, your code creates impressive things. Go ahead, you can do it!",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "What a hellish place? The design of the site is out of rhythm, the information is unclear, and navigation is a nightmare. Some kind of mess, not for men!",
      "articleId": "1",
      "userId": "2"
    },
    {
      "id": "3",
      "text": "Omg, is this a fake Facebook Post? Damn it looks so real! Start building your own. Use the settings to the left to begin - You can also add comments & emoticons Wink",
      "articleId": "1",
      "userId": "3"
    },
    {
      "articleId": "1",
      "userId": "1",
      "text": "Nastya Polnuy lox",
      "id": "KpqHQqL"
    },
    {
      "articleId": "1",
      "userId": "1",
      "text": "jhgbjhkgkjgugui",
      "id": "c-b8CR2"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "Что было добавлено в ECMAScript в 2023 году",
      "subtitle": "Рассказываем, что было добавлено в ECMAScript в 2023 году. Это стандарт JavaScript, который устанавливает правила и синтаксис JS-кода. Вот, какие функции были добавлены...",
      "img": "https://www.leixue.com/uploads/2019/06/ECMAScript.png",
      "views": 1022,
      "createdAt": "22 Nov 2023",
      "userId": "1",
      "type": [
        "IT",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "ECMAScript – это стандарт языка программирования JavaScript, который устанавливает правила, синтаксис и другие критерии создания JavaScript-кода.",
              "ECMAScript ежегодно дополняется сообществом разработчиков JavaScript и соответствует стандартам ECMA International. Самые последние обновления ECMAScript включают в себя новые функции и методы, которые помогают разработчикам писать более гибкий и мощный код.",
              "Эти обновления позволяют создавать более качественные и быстрые веб-приложения, а также обеспечивают возможность масштабирования и поддержки кода в будущем. ",
              "Обновления помогают большинству веб-приложений стать более мощными и производительными, что расширяет возможности для создания инновационных и уникальных приложений на основе JavaScript.",
              "Вот, какие функции были добавлены в ECMAScript в 2023 году."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "1. Поиск элемента в массиве",
          "paragraphs": [
              "Эта функция позволяет найти последний элемент массива, соответствующий заданному условию."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "const array = [{a: 1, b: 1}, {a: 2, b: 2}, {a: 3, b: 3}, {a: 4, b: 4}] \n console.log(array.findLast(n => n)); //result -> {a: 4,b: 4 } \n console.log(array.findLast(n => n.a * 5 === 20)); // result -> {a:4,b:4} as the condition is true so it returns the last element. \n console.log(array.findLast(n => n.a * 5 === 21)); //result -> undefined as the condition is false so return undefined instead of {a:4,b:4}. \n console.log(array.findLastIndex(n => n.a * 5 === 21)); // result -> -1 as the condition is not justified for returning the last element. /n console.log(array.findLastIndex(n => n.a * 5 === 20)); // result -> 3 which is the index of the last element as the condition is true."
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "2. Грамматика Hashbang",
          "paragraphs": [
              "Эта функция позволит нам использовать Hashbang/Shebang в некоторых CLI.",
              "Shebang представлен #! и представляет собой специальную строку в начале скрипта, которая сообщает операционной системе, какой интерпретатор использовать при выполнении скрипта."
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "#!/usr/bin/env node \n // in the Script Goal \n  'use strict'; \n console.log(2*3); \n #!/usr/bin/env node \n // in the Module Goal \n export {}; \n console.log(2*2);"
      }
      ]
    },
    {
      "id": "2",
      "title": "React: революция использования фигурных скобочек",
      "subtitle": "В этот раз Александр размышляет о том, как простые и понятные привычки можно переосмыслить и пофиксить фигурными скобочками. Бонус: смешная панда, которая задает много вопросов и вечно чем-то недовольна.",
      "img": "https://sun9-53.userapi.com/impg/eW-24xFtX4ETG9YY3qVJKN315Y2Xr2POgb9gMw/mTNAKCMZlHc.jpg?size=912x512&quality=96&sign=c0cf6056a4a7e8ffbeb75593b95edd11&c_uniq_tag=kWMDJwtKfcOtaC3MNBHcNAcJkKZnyz8TzR20JaXRslo&type=album",
      "views": 7800,
      "createdAt": "10 May 2023",
      "userId": "4",
      "type": [
        "ReactJs",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "Хорошо, react. Как много мы используем всего, потому что так исторически сложилось: пишем функции задом наперед (сначала объяви, потом вызывай). Оборачиваем все в стрелочные функции и константы с ними, когда достаточно именованной функции. Этот список можно хорошенько продолжить",
              "В этой статье хотелось бы обсудить несколько привычек, которые есть у нас всех и которые, возможно, пора переосмыслить."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Начнем с кастомных хуков, которым надо вернуть результат, в частности пару значений. Классическим примером может быть хук для запроса данных по сети и отслеживания в процессе ли этот запрос сейчас, чтобы добавить на страницу лоадер."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "function useClient(clientId) { \n  const [loadedClient, setLoadedClient] = useState(null) \n  const [isLoading, setIsLoading] = useState(false) \n\n  useEffect(() => { \n  const loadClient = async () => { \n  try { \n  setIsLoading(true) \n  const clientData = {} // actual data loading call goes here \n  setLoadedClient(clientData) \n } \n  finally { \n  setIsLoading(false) \n } \n } \n\n loadClient() \n }, [clientId]) \n\n return [loadedClient, isLoading] \n }"
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "В итоге вызываем его вот как-то так:"
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "const [loadedClient, isLoading] = useClient(clientId)"
      },
      {
        "id": "6",
        "type": "TEXT",
        "title": "",
        "paragraphs": [
            "А может вот так:"
        ]
    },
    {
        "id": "7",
        "type": "CODE",
        "code": "const [client, isClientLoading] = useClient(clientId)"
    },
    {
      "id": "8",
      "type": "TEXT",
      "title": "",
      "paragraphs": [
          "Кажется, что тут мы руководствуемся паттерном от useState, когда он возвращает нам массив из значения и функции для его обновления, а мы потом деструктурируем массив и получаем все по индексу, даем этому любые имена, круто."
      ]
  },
  {
    "id": "9",
    "type": "TEXT",
    "title": "Почему для useState пришлось сделать именно так?",
    "paragraphs": [
        "Потому, что это библиотечная универсальная функция. Клиенты вызывают её в своих конкретных случаях и хотят давать разные, полезные, говорящие имена."
    ]
},
{
  "id": "10",
  "type": "TEXT",
  "title": "Что же выходит с нашим кастомных хуком useClient?",
  "paragraphs": [
      "Мы следуем чьей-то конвенции, потому что все так делают, а значит это react way и все в таком духе",
      "Но нужна ли нам эта гибкость в плане именования результатов работы этой функции? А если у нас нет TypeScript, то кто поможет заподозрить неладное? А если искать все использования полным поиском по проекту без использования полезных фишек IDE, то много ли мы найдем, если каждый называет как хочет?",
      "Продолжение следует..."
  ]
}
      ]
    },
    {
      "id": "3",
      "title": "Почему Data Science не для вас?",
      "subtitle": "Много раз видели рекламу, на которой вас активно зазывали на курсы по Data Science и обещали золотые горы через несколько месяцев обучения? Наш аналитик данных Мария выразила своё мнение по этому поводу этого...",
      "img": "https://sun9-30.userapi.com/impg/r13cpZ0fRCnmRELB2O_8vXAAaYDyw7k1X8A2og/9RLjap8vwh4.jpg?size=807x807&quality=95&sign=7366f10dfd3f01b4d3b0c2af19b17733&c_uniq_tag=7HGcGK1LAHolX2sODliZZu0fqpCldtdKM1I3dS322SE&type=album",
      "views": 9200,
      "createdAt": "20 Mar 2023",
      "userId": "4",
      "type": [
        "IT",
        "Big Data",
        "Data Engineering"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/2bb/b2b/7c9/2bbb2b7c920bfc76c0109b41f8035adc.png",
          "title": ""
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Data Science сейчас во многом благодаря активному маркетингу становится очень популярной темой. Быть датасаентистом – модно и, как говорят многие рекламки, которые часто попадаются на глаза, не так уж и сложно. Ходят слухи, что работодатели стоят в очереди за возможность взять человека с курсов. Получить оффер на работу крайне легко, ведь в ваши обязанности будет входить требование данных от заказчика (как обычно говорят, чем больше данных – тем лучше) и закидывать их в искусственный интеллект, который работает по принципу черного ящика. Кстати, еще и платят немереное количество денег за всё это.",
              "В этой душераздирающей статье решили попробовать отговорить людей, которые готовы оставить кучу денег за курсы по Data Science, браться за это дело, а может быть и помочь определиться с тем, что на самом деле стоит сделать, чтобы встать на путь истинный."
          ]
      },
      {
        "id": "3",
        "type": "TEXT",
        "title": "Почему всё-таки Data Science не для вас?",
        "paragraphs": [
            "1. Data Science – для усидчивых. Над одной и той же задачей придется сидеть очень долго. Пока найдешь все необходимое в данных, пока найдешь оптимальный способ обработки данных, пока погрузишься в область, пока переберешь все модельки, которые могут потенциально хорошо решить эту задачу… А еще надо дождаться, пока модель обучится - это ж целая вечность пройдет! Потом еще выясняется, что у модели метрики недостаточно хорошие, и весь этот путь нужно пройти заново, но с новыми идеями.",
            "Хватит ли вам умения занять себя другими делами во время обучения модели? Вряд ли проджект будет в восторге, если узнает, что несколько дней вы пили кофе, пока модель обучалась. Хватит ли вам терпения перебирать идеи до тех пор, пока точность модели не достигнет нужного бизнесу числа?",
            "2. Математика останавливается не на 2+2 и даже не на интегралах. Вам точно понадобятся знания по мат.статистике, линейной алгебре, теории вероятностей. Нет, вам не хватит встроенных в библиотечки функций. Может быть для какого-то поверхностного анализа и составления простецкой модели – да, но чтобы лучше анализировать огромные массивы данных, в математике действительно нужно разбираться.",
            "3. Вам нужно знать Python/R/Scala или еще что-то, на чем вы соберете ваше решение. Вы не бэкенд-разработчик, но вам нужно приготовить умную штуку, которую можно будет встроить в прод. Нужно будет составлять POC-шки, функции предобработки данных, которые затем будет имплементировать бэкенд-разраб. Необходимо уметь общаться с бэкендерами на их языке, если им понадобится помощь при внедрении вашего решения",
            "4. Еще немного о встраивании модели в прод: вам нужно интересоваться тем, на каком железе будет запущена модель. Ну не получится запустить трансформер на сервачке заказчика с двумя ядрами и без малейшего признака GPU. А решение, которое работает на вашем компе и не работает на устройствах клиента не будет принято и, соответственно, оплачено."
        ]
     }
      ]
    },
    {
      "id": "4",
      "title": "React: революция использования фигурных скобочек",
      "subtitle": "В этот раз Александр размышляет о том, как простые и понятные привычки можно переосмыслить и пофиксить фигурными скобочками. Бонус: смешная панда, которая задает много вопросов и вечно чем-то недовольна.",
      "img": "https://sun9-53.userapi.com/impg/eW-24xFtX4ETG9YY3qVJKN315Y2Xr2POgb9gMw/mTNAKCMZlHc.jpg?size=912x512&quality=96&sign=c0cf6056a4a7e8ffbeb75593b95edd11&c_uniq_tag=kWMDJwtKfcOtaC3MNBHcNAcJkKZnyz8TzR20JaXRslo&type=album",
      "views": 7800,
      "createdAt": "10 May 2023",
      "userId": "4",
      "type": [
        "ReactJs",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "Хорошо, react. Как много мы используем всего, потому что так исторически сложилось: пишем функции задом наперед (сначала объяви, потом вызывай). Оборачиваем все в стрелочные функции и константы с ними, когда достаточно именованной функции. Этот список можно хорошенько продолжить",
              "В этой статье хотелось бы обсудить несколько привычек, которые есть у нас всех и которые, возможно, пора переосмыслить."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Начнем с кастомных хуков, которым надо вернуть результат, в частности пару значений. Классическим примером может быть хук для запроса данных по сети и отслеживания в процессе ли этот запрос сейчас, чтобы добавить на страницу лоадер."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "function useClient(clientId) { \n  const [loadedClient, setLoadedClient] = useState(null) \n  const [isLoading, setIsLoading] = useState(false) \n\n  useEffect(() => { \n  const loadClient = async () => { \n  try { \n  setIsLoading(true) \n  const clientData = {} // actual data loading call goes here \n  setLoadedClient(clientData) \n } \n  finally { \n  setIsLoading(false) \n } \n } \n\n loadClient() \n }, [clientId]) \n\n return [loadedClient, isLoading] \n }"
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "В итоге вызываем его вот как-то так:"
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "const [loadedClient, isLoading] = useClient(clientId)"
      },
      {
        "id": "6",
        "type": "TEXT",
        "title": "",
        "paragraphs": [
            "А может вот так:"
        ]
    },
    {
        "id": "7",
        "type": "CODE",
        "code": "const [client, isClientLoading] = useClient(clientId)"
    },
    {
      "id": "8",
      "type": "TEXT",
      "title": "",
      "paragraphs": [
          "Кажется, что тут мы руководствуемся паттерном от useState, когда он возвращает нам массив из значения и функции для его обновления, а мы потом деструктурируем массив и получаем все по индексу, даем этому любые имена, круто."
      ]
  },
  {
    "id": "9",
    "type": "TEXT",
    "title": "Почему для useState пришлось сделать именно так?",
    "paragraphs": [
        "Потому, что это библиотечная универсальная функция. Клиенты вызывают её в своих конкретных случаях и хотят давать разные, полезные, говорящие имена."
    ]
},
{
  "id": "10",
  "type": "TEXT",
  "title": "Что же выходит с нашим кастомных хуком useClient?",
  "paragraphs": [
      "Мы следуем чьей-то конвенции, потому что все так делают, а значит это react way и все в таком духе",
      "Но нужна ли нам эта гибкость в плане именования результатов работы этой функции? А если у нас нет TypeScript, то кто поможет заподозрить неладное? А если искать все использования полным поиском по проекту без использования полезных фишек IDE, то много ли мы найдем, если каждый называет как хочет?",
      "Продолжение следует..."
  ]
}
      ]
    },
    {
      "id": "5",
      "title": "Почему Data Science не для вас?",
      "subtitle": "Много раз видели рекламу, на которой вас активно зазывали на курсы по Data Science и обещали золотые горы через несколько месяцев обучения? Наш аналитик данных Мария выразила своё мнение по этому поводу этого...",
      "img": "https://sun9-30.userapi.com/impg/r13cpZ0fRCnmRELB2O_8vXAAaYDyw7k1X8A2og/9RLjap8vwh4.jpg?size=807x807&quality=95&sign=7366f10dfd3f01b4d3b0c2af19b17733&c_uniq_tag=7HGcGK1LAHolX2sODliZZu0fqpCldtdKM1I3dS322SE&type=album",
      "views": 9200,
      "createdAt": "20 Mar 2023",
      "userId": "4",
      "type": [
        "IT",
        "Big Data",
        "Data Engineering"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/2bb/b2b/7c9/2bbb2b7c920bfc76c0109b41f8035adc.png",
          "title": ""
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Data Science сейчас во многом благодаря активному маркетингу становится очень популярной темой. Быть датасаентистом – модно и, как говорят многие рекламки, которые часто попадаются на глаза, не так уж и сложно. Ходят слухи, что работодатели стоят в очереди за возможность взять человека с курсов. Получить оффер на работу крайне легко, ведь в ваши обязанности будет входить требование данных от заказчика (как обычно говорят, чем больше данных – тем лучше) и закидывать их в искусственный интеллект, который работает по принципу черного ящика. Кстати, еще и платят немереное количество денег за всё это.",
              "В этой душераздирающей статье решили попробовать отговорить людей, которые готовы оставить кучу денег за курсы по Data Science, браться за это дело, а может быть и помочь определиться с тем, что на самом деле стоит сделать, чтобы встать на путь истинный."
          ]
      },
      {
        "id": "3",
        "type": "TEXT",
        "title": "Почему всё-таки Data Science не для вас?",
        "paragraphs": [
            "1. Data Science – для усидчивых. Над одной и той же задачей придется сидеть очень долго. Пока найдешь все необходимое в данных, пока найдешь оптимальный способ обработки данных, пока погрузишься в область, пока переберешь все модельки, которые могут потенциально хорошо решить эту задачу… А еще надо дождаться, пока модель обучится - это ж целая вечность пройдет! Потом еще выясняется, что у модели метрики недостаточно хорошие, и весь этот путь нужно пройти заново, но с новыми идеями.",
            "Хватит ли вам умения занять себя другими делами во время обучения модели? Вряд ли проджект будет в восторге, если узнает, что несколько дней вы пили кофе, пока модель обучалась. Хватит ли вам терпения перебирать идеи до тех пор, пока точность модели не достигнет нужного бизнесу числа?",
            "2. Математика останавливается не на 2+2 и даже не на интегралах. Вам точно понадобятся знания по мат.статистике, линейной алгебре, теории вероятностей. Нет, вам не хватит встроенных в библиотечки функций. Может быть для какого-то поверхностного анализа и составления простецкой модели – да, но чтобы лучше анализировать огромные массивы данных, в математике действительно нужно разбираться.",
            "3. Вам нужно знать Python/R/Scala или еще что-то, на чем вы соберете ваше решение. Вы не бэкенд-разработчик, но вам нужно приготовить умную штуку, которую можно будет встроить в прод. Нужно будет составлять POC-шки, функции предобработки данных, которые затем будет имплементировать бэкенд-разраб. Необходимо уметь общаться с бэкендерами на их языке, если им понадобится помощь при внедрении вашего решения",
            "4. Еще немного о встраивании модели в прод: вам нужно интересоваться тем, на каком железе будет запущена модель. Ну не получится запустить трансформер на сервачке заказчика с двумя ядрами и без малейшего признака GPU. А решение, которое работает на вашем компе и не работает на устройствах клиента не будет принято и, соответственно, оплачено."
        ]
     }
      ]
    }
    ,
    {
      "id": "6",
      "title": "React: революция использования фигурных скобочек",
      "subtitle": "В этот раз Александр размышляет о том, как простые и понятные привычки можно переосмыслить и пофиксить фигурными скобочками. Бонус: смешная панда, которая задает много вопросов и вечно чем-то недовольна.",
      "img": "https://sun9-53.userapi.com/impg/eW-24xFtX4ETG9YY3qVJKN315Y2Xr2POgb9gMw/mTNAKCMZlHc.jpg?size=912x512&quality=96&sign=c0cf6056a4a7e8ffbeb75593b95edd11&c_uniq_tag=kWMDJwtKfcOtaC3MNBHcNAcJkKZnyz8TzR20JaXRslo&type=album",
      "views": 7800,
      "createdAt": "10 May 2023",
      "userId": "4",
      "type": [
        "ReactJs",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "Хорошо, react. Как много мы используем всего, потому что так исторически сложилось: пишем функции задом наперед (сначала объяви, потом вызывай). Оборачиваем все в стрелочные функции и константы с ними, когда достаточно именованной функции. Этот список можно хорошенько продолжить",
              "В этой статье хотелось бы обсудить несколько привычек, которые есть у нас всех и которые, возможно, пора переосмыслить."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Начнем с кастомных хуков, которым надо вернуть результат, в частности пару значений. Классическим примером может быть хук для запроса данных по сети и отслеживания в процессе ли этот запрос сейчас, чтобы добавить на страницу лоадер."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "function useClient(clientId) { \n  const [loadedClient, setLoadedClient] = useState(null) \n  const [isLoading, setIsLoading] = useState(false) \n\n  useEffect(() => { \n  const loadClient = async () => { \n  try { \n  setIsLoading(true) \n  const clientData = {} // actual data loading call goes here \n  setLoadedClient(clientData) \n } \n  finally { \n  setIsLoading(false) \n } \n } \n\n loadClient() \n }, [clientId]) \n\n return [loadedClient, isLoading] \n }"
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "В итоге вызываем его вот как-то так:"
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "const [loadedClient, isLoading] = useClient(clientId)"
      },
      {
        "id": "6",
        "type": "TEXT",
        "title": "",
        "paragraphs": [
            "А может вот так:"
        ]
    },
    {
        "id": "7",
        "type": "CODE",
        "code": "const [client, isClientLoading] = useClient(clientId)"
    },
    {
      "id": "8",
      "type": "TEXT",
      "title": "",
      "paragraphs": [
          "Кажется, что тут мы руководствуемся паттерном от useState, когда он возвращает нам массив из значения и функции для его обновления, а мы потом деструктурируем массив и получаем все по индексу, даем этому любые имена, круто."
      ]
  },
  {
    "id": "9",
    "type": "TEXT",
    "title": "Почему для useState пришлось сделать именно так?",
    "paragraphs": [
        "Потому, что это библиотечная универсальная функция. Клиенты вызывают её в своих конкретных случаях и хотят давать разные, полезные, говорящие имена."
    ]
},
{
  "id": "10",
  "type": "TEXT",
  "title": "Что же выходит с нашим кастомных хуком useClient?",
  "paragraphs": [
      "Мы следуем чьей-то конвенции, потому что все так делают, а значит это react way и все в таком духе",
      "Но нужна ли нам эта гибкость в плане именования результатов работы этой функции? А если у нас нет TypeScript, то кто поможет заподозрить неладное? А если искать все использования полным поиском по проекту без использования полезных фишек IDE, то много ли мы найдем, если каждый называет как хочет?",
      "Продолжение следует..."
  ]
}
      ]
    },
    {
      "id": "7",
      "title": "Почему Data Science не для вас?",
      "subtitle": "Много раз видели рекламу, на которой вас активно зазывали на курсы по Data Science и обещали золотые горы через несколько месяцев обучения? Наш аналитик данных Мария выразила своё мнение по этому поводу этого...",
      "img": "https://sun9-30.userapi.com/impg/r13cpZ0fRCnmRELB2O_8vXAAaYDyw7k1X8A2og/9RLjap8vwh4.jpg?size=807x807&quality=95&sign=7366f10dfd3f01b4d3b0c2af19b17733&c_uniq_tag=7HGcGK1LAHolX2sODliZZu0fqpCldtdKM1I3dS322SE&type=album",
      "views": 9200,
      "createdAt": "20 Mar 2023",
      "userId": "4",
      "type": [
        "IT",
        "Big Data",
        "Data Engineering"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/2bb/b2b/7c9/2bbb2b7c920bfc76c0109b41f8035adc.png",
          "title": ""
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Data Science сейчас во многом благодаря активному маркетингу становится очень популярной темой. Быть датасаентистом – модно и, как говорят многие рекламки, которые часто попадаются на глаза, не так уж и сложно. Ходят слухи, что работодатели стоят в очереди за возможность взять человека с курсов. Получить оффер на работу крайне легко, ведь в ваши обязанности будет входить требование данных от заказчика (как обычно говорят, чем больше данных – тем лучше) и закидывать их в искусственный интеллект, который работает по принципу черного ящика. Кстати, еще и платят немереное количество денег за всё это.",
              "В этой душераздирающей статье решили попробовать отговорить людей, которые готовы оставить кучу денег за курсы по Data Science, браться за это дело, а может быть и помочь определиться с тем, что на самом деле стоит сделать, чтобы встать на путь истинный."
          ]
      },
      {
        "id": "3",
        "type": "TEXT",
        "title": "Почему всё-таки Data Science не для вас?",
        "paragraphs": [
            "1. Data Science – для усидчивых. Над одной и той же задачей придется сидеть очень долго. Пока найдешь все необходимое в данных, пока найдешь оптимальный способ обработки данных, пока погрузишься в область, пока переберешь все модельки, которые могут потенциально хорошо решить эту задачу… А еще надо дождаться, пока модель обучится - это ж целая вечность пройдет! Потом еще выясняется, что у модели метрики недостаточно хорошие, и весь этот путь нужно пройти заново, но с новыми идеями.",
            "Хватит ли вам умения занять себя другими делами во время обучения модели? Вряд ли проджект будет в восторге, если узнает, что несколько дней вы пили кофе, пока модель обучалась. Хватит ли вам терпения перебирать идеи до тех пор, пока точность модели не достигнет нужного бизнесу числа?",
            "2. Математика останавливается не на 2+2 и даже не на интегралах. Вам точно понадобятся знания по мат.статистике, линейной алгебре, теории вероятностей. Нет, вам не хватит встроенных в библиотечки функций. Может быть для какого-то поверхностного анализа и составления простецкой модели – да, но чтобы лучше анализировать огромные массивы данных, в математике действительно нужно разбираться.",
            "3. Вам нужно знать Python/R/Scala или еще что-то, на чем вы соберете ваше решение. Вы не бэкенд-разработчик, но вам нужно приготовить умную штуку, которую можно будет встроить в прод. Нужно будет составлять POC-шки, функции предобработки данных, которые затем будет имплементировать бэкенд-разраб. Необходимо уметь общаться с бэкендерами на их языке, если им понадобится помощь при внедрении вашего решения",
            "4. Еще немного о встраивании модели в прод: вам нужно интересоваться тем, на каком железе будет запущена модель. Ну не получится запустить трансформер на сервачке заказчика с двумя ядрами и без малейшего признака GPU. А решение, которое работает на вашем компе и не работает на устройствах клиента не будет принято и, соответственно, оплачено."
        ]
     }
      ]
    }
    ,
    {
      "id": "8",
      "title": "React: революция использования фигурных скобочек",
      "subtitle": "В этот раз Александр размышляет о том, как простые и понятные привычки можно переосмыслить и пофиксить фигурными скобочками. Бонус: смешная панда, которая задает много вопросов и вечно чем-то недовольна.",
      "img": "https://sun9-53.userapi.com/impg/eW-24xFtX4ETG9YY3qVJKN315Y2Xr2POgb9gMw/mTNAKCMZlHc.jpg?size=912x512&quality=96&sign=c0cf6056a4a7e8ffbeb75593b95edd11&c_uniq_tag=kWMDJwtKfcOtaC3MNBHcNAcJkKZnyz8TzR20JaXRslo&type=album",
      "views": 7800,
      "createdAt": "10 May 2023",
      "userId": "4",
      "type": [
        "ReactJs",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "Хорошо, react. Как много мы используем всего, потому что так исторически сложилось: пишем функции задом наперед (сначала объяви, потом вызывай). Оборачиваем все в стрелочные функции и константы с ними, когда достаточно именованной функции. Этот список можно хорошенько продолжить",
              "В этой статье хотелось бы обсудить несколько привычек, которые есть у нас всех и которые, возможно, пора переосмыслить."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Начнем с кастомных хуков, которым надо вернуть результат, в частности пару значений. Классическим примером может быть хук для запроса данных по сети и отслеживания в процессе ли этот запрос сейчас, чтобы добавить на страницу лоадер."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "function useClient(clientId) { \n  const [loadedClient, setLoadedClient] = useState(null) \n  const [isLoading, setIsLoading] = useState(false) \n\n  useEffect(() => { \n  const loadClient = async () => { \n  try { \n  setIsLoading(true) \n  const clientData = {} // actual data loading call goes here \n  setLoadedClient(clientData) \n } \n  finally { \n  setIsLoading(false) \n } \n } \n\n loadClient() \n }, [clientId]) \n\n return [loadedClient, isLoading] \n }"
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "В итоге вызываем его вот как-то так:"
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "const [loadedClient, isLoading] = useClient(clientId)"
      },
      {
        "id": "6",
        "type": "TEXT",
        "title": "",
        "paragraphs": [
            "А может вот так:"
        ]
    },
    {
        "id": "7",
        "type": "CODE",
        "code": "const [client, isClientLoading] = useClient(clientId)"
    },
    {
      "id": "8",
      "type": "TEXT",
      "title": "",
      "paragraphs": [
          "Кажется, что тут мы руководствуемся паттерном от useState, когда он возвращает нам массив из значения и функции для его обновления, а мы потом деструктурируем массив и получаем все по индексу, даем этому любые имена, круто."
      ]
  },
  {
    "id": "9",
    "type": "TEXT",
    "title": "Почему для useState пришлось сделать именно так?",
    "paragraphs": [
        "Потому, что это библиотечная универсальная функция. Клиенты вызывают её в своих конкретных случаях и хотят давать разные, полезные, говорящие имена."
    ]
},
{
  "id": "10",
  "type": "TEXT",
  "title": "Что же выходит с нашим кастомных хуком useClient?",
  "paragraphs": [
      "Мы следуем чьей-то конвенции, потому что все так делают, а значит это react way и все в таком духе",
      "Но нужна ли нам эта гибкость в плане именования результатов работы этой функции? А если у нас нет TypeScript, то кто поможет заподозрить неладное? А если искать все использования полным поиском по проекту без использования полезных фишек IDE, то много ли мы найдем, если каждый называет как хочет?",
      "Продолжение следует..."
  ]
}
      ]
    },
    {
      "id": "9",
      "title": "Почему Data Science не для вас?",
      "subtitle": "Много раз видели рекламу, на которой вас активно зазывали на курсы по Data Science и обещали золотые горы через несколько месяцев обучения? Наш аналитик данных Мария выразила своё мнение по этому поводу этого...",
      "img": "https://sun9-30.userapi.com/impg/r13cpZ0fRCnmRELB2O_8vXAAaYDyw7k1X8A2og/9RLjap8vwh4.jpg?size=807x807&quality=95&sign=7366f10dfd3f01b4d3b0c2af19b17733&c_uniq_tag=7HGcGK1LAHolX2sODliZZu0fqpCldtdKM1I3dS322SE&type=album",
      "views": 9200,
      "createdAt": "20 Mar 2023",
      "userId": "4",
      "type": [
        "IT",
        "Big Data",
        "Data Engineering"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/2bb/b2b/7c9/2bbb2b7c920bfc76c0109b41f8035adc.png",
          "title": ""
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Data Science сейчас во многом благодаря активному маркетингу становится очень популярной темой. Быть датасаентистом – модно и, как говорят многие рекламки, которые часто попадаются на глаза, не так уж и сложно. Ходят слухи, что работодатели стоят в очереди за возможность взять человека с курсов. Получить оффер на работу крайне легко, ведь в ваши обязанности будет входить требование данных от заказчика (как обычно говорят, чем больше данных – тем лучше) и закидывать их в искусственный интеллект, который работает по принципу черного ящика. Кстати, еще и платят немереное количество денег за всё это.",
              "В этой душераздирающей статье решили попробовать отговорить людей, которые готовы оставить кучу денег за курсы по Data Science, браться за это дело, а может быть и помочь определиться с тем, что на самом деле стоит сделать, чтобы встать на путь истинный."
          ]
      },
      {
        "id": "3",
        "type": "TEXT",
        "title": "Почему всё-таки Data Science не для вас?",
        "paragraphs": [
            "1. Data Science – для усидчивых. Над одной и той же задачей придется сидеть очень долго. Пока найдешь все необходимое в данных, пока найдешь оптимальный способ обработки данных, пока погрузишься в область, пока переберешь все модельки, которые могут потенциально хорошо решить эту задачу… А еще надо дождаться, пока модель обучится - это ж целая вечность пройдет! Потом еще выясняется, что у модели метрики недостаточно хорошие, и весь этот путь нужно пройти заново, но с новыми идеями.",
            "Хватит ли вам умения занять себя другими делами во время обучения модели? Вряд ли проджект будет в восторге, если узнает, что несколько дней вы пили кофе, пока модель обучалась. Хватит ли вам терпения перебирать идеи до тех пор, пока точность модели не достигнет нужного бизнесу числа?",
            "2. Математика останавливается не на 2+2 и даже не на интегралах. Вам точно понадобятся знания по мат.статистике, линейной алгебре, теории вероятностей. Нет, вам не хватит встроенных в библиотечки функций. Может быть для какого-то поверхностного анализа и составления простецкой модели – да, но чтобы лучше анализировать огромные массивы данных, в математике действительно нужно разбираться.",
            "3. Вам нужно знать Python/R/Scala или еще что-то, на чем вы соберете ваше решение. Вы не бэкенд-разработчик, но вам нужно приготовить умную штуку, которую можно будет встроить в прод. Нужно будет составлять POC-шки, функции предобработки данных, которые затем будет имплементировать бэкенд-разраб. Необходимо уметь общаться с бэкендерами на их языке, если им понадобится помощь при внедрении вашего решения",
            "4. Еще немного о встраивании модели в прод: вам нужно интересоваться тем, на каком железе будет запущена модель. Ну не получится запустить трансформер на сервачке заказчика с двумя ядрами и без малейшего признака GPU. А решение, которое работает на вашем компе и не работает на устройствах клиента не будет принято и, соответственно, оплачено."
        ]
     }
      ]
    },
    {
      "id": "10",
      "title": "React: революция использования фигурных скобочек",
      "subtitle": "В этот раз Александр размышляет о том, как простые и понятные привычки можно переосмыслить и пофиксить фигурными скобочками. Бонус: смешная панда, которая задает много вопросов и вечно чем-то недовольна.",
      "img": "https://sun9-53.userapi.com/impg/eW-24xFtX4ETG9YY3qVJKN315Y2Xr2POgb9gMw/mTNAKCMZlHc.jpg?size=912x512&quality=96&sign=c0cf6056a4a7e8ffbeb75593b95edd11&c_uniq_tag=kWMDJwtKfcOtaC3MNBHcNAcJkKZnyz8TzR20JaXRslo&type=album",
      "views": 7800,
      "createdAt": "10 May 2023",
      "userId": "4",
      "type": [
        "ReactJs",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "Хорошо, react. Как много мы используем всего, потому что так исторически сложилось: пишем функции задом наперед (сначала объяви, потом вызывай). Оборачиваем все в стрелочные функции и константы с ними, когда достаточно именованной функции. Этот список можно хорошенько продолжить",
              "В этой статье хотелось бы обсудить несколько привычек, которые есть у нас всех и которые, возможно, пора переосмыслить."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Начнем с кастомных хуков, которым надо вернуть результат, в частности пару значений. Классическим примером может быть хук для запроса данных по сети и отслеживания в процессе ли этот запрос сейчас, чтобы добавить на страницу лоадер."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "function useClient(clientId) { \n  const [loadedClient, setLoadedClient] = useState(null) \n  const [isLoading, setIsLoading] = useState(false) \n\n  useEffect(() => { \n  const loadClient = async () => { \n  try { \n  setIsLoading(true) \n  const clientData = {} // actual data loading call goes here \n  setLoadedClient(clientData) \n } \n  finally { \n  setIsLoading(false) \n } \n } \n\n loadClient() \n }, [clientId]) \n\n return [loadedClient, isLoading] \n }"
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "В итоге вызываем его вот как-то так:"
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "const [loadedClient, isLoading] = useClient(clientId)"
      },
      {
        "id": "6",
        "type": "TEXT",
        "title": "",
        "paragraphs": [
            "А может вот так:"
        ]
    },
    {
        "id": "7",
        "type": "CODE",
        "code": "const [client, isClientLoading] = useClient(clientId)"
    },
    {
      "id": "8",
      "type": "TEXT",
      "title": "",
      "paragraphs": [
          "Кажется, что тут мы руководствуемся паттерном от useState, когда он возвращает нам массив из значения и функции для его обновления, а мы потом деструктурируем массив и получаем все по индексу, даем этому любые имена, круто."
      ]
  },
  {
    "id": "9",
    "type": "TEXT",
    "title": "Почему для useState пришлось сделать именно так?",
    "paragraphs": [
        "Потому, что это библиотечная универсальная функция. Клиенты вызывают её в своих конкретных случаях и хотят давать разные, полезные, говорящие имена."
    ]
},
{
  "id": "10",
  "type": "TEXT",
  "title": "Что же выходит с нашим кастомных хуком useClient?",
  "paragraphs": [
      "Мы следуем чьей-то конвенции, потому что все так делают, а значит это react way и все в таком духе",
      "Но нужна ли нам эта гибкость в плане именования результатов работы этой функции? А если у нас нет TypeScript, то кто поможет заподозрить неладное? А если искать все использования полным поиском по проекту без использования полезных фишек IDE, то много ли мы найдем, если каждый называет как хочет?",
      "Продолжение следует..."
  ]
}
      ]
    },
    {
      "id": "11",
      "title": "Почему Data Science не для вас?",
      "subtitle": "Много раз видели рекламу, на которой вас активно зазывали на курсы по Data Science и обещали золотые горы через несколько месяцев обучения? Наш аналитик данных Мария выразила своё мнение по этому поводу этого...",
      "img": "https://sun9-30.userapi.com/impg/r13cpZ0fRCnmRELB2O_8vXAAaYDyw7k1X8A2og/9RLjap8vwh4.jpg?size=807x807&quality=95&sign=7366f10dfd3f01b4d3b0c2af19b17733&c_uniq_tag=7HGcGK1LAHolX2sODliZZu0fqpCldtdKM1I3dS322SE&type=album",
      "views": 9200,
      "createdAt": "20 Mar 2023",
      "userId": "4",
      "type": [
        "IT",
        "Big Data",
        "Data Engineering"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/2bb/b2b/7c9/2bbb2b7c920bfc76c0109b41f8035adc.png",
          "title": ""
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Data Science сейчас во многом благодаря активному маркетингу становится очень популярной темой. Быть датасаентистом – модно и, как говорят многие рекламки, которые часто попадаются на глаза, не так уж и сложно. Ходят слухи, что работодатели стоят в очереди за возможность взять человека с курсов. Получить оффер на работу крайне легко, ведь в ваши обязанности будет входить требование данных от заказчика (как обычно говорят, чем больше данных – тем лучше) и закидывать их в искусственный интеллект, который работает по принципу черного ящика. Кстати, еще и платят немереное количество денег за всё это.",
              "В этой душераздирающей статье решили попробовать отговорить людей, которые готовы оставить кучу денег за курсы по Data Science, браться за это дело, а может быть и помочь определиться с тем, что на самом деле стоит сделать, чтобы встать на путь истинный."
          ]
      },
      {
        "id": "3",
        "type": "TEXT",
        "title": "Почему всё-таки Data Science не для вас?",
        "paragraphs": [
            "1. Data Science – для усидчивых. Над одной и той же задачей придется сидеть очень долго. Пока найдешь все необходимое в данных, пока найдешь оптимальный способ обработки данных, пока погрузишься в область, пока переберешь все модельки, которые могут потенциально хорошо решить эту задачу… А еще надо дождаться, пока модель обучится - это ж целая вечность пройдет! Потом еще выясняется, что у модели метрики недостаточно хорошие, и весь этот путь нужно пройти заново, но с новыми идеями.",
            "Хватит ли вам умения занять себя другими делами во время обучения модели? Вряд ли проджект будет в восторге, если узнает, что несколько дней вы пили кофе, пока модель обучалась. Хватит ли вам терпения перебирать идеи до тех пор, пока точность модели не достигнет нужного бизнесу числа?",
            "2. Математика останавливается не на 2+2 и даже не на интегралах. Вам точно понадобятся знания по мат.статистике, линейной алгебре, теории вероятностей. Нет, вам не хватит встроенных в библиотечки функций. Может быть для какого-то поверхностного анализа и составления простецкой модели – да, но чтобы лучше анализировать огромные массивы данных, в математике действительно нужно разбираться.",
            "3. Вам нужно знать Python/R/Scala или еще что-то, на чем вы соберете ваше решение. Вы не бэкенд-разработчик, но вам нужно приготовить умную штуку, которую можно будет встроить в прод. Нужно будет составлять POC-шки, функции предобработки данных, которые затем будет имплементировать бэкенд-разраб. Необходимо уметь общаться с бэкендерами на их языке, если им понадобится помощь при внедрении вашего решения",
            "4. Еще немного о встраивании модели в прод: вам нужно интересоваться тем, на каком железе будет запущена модель. Ну не получится запустить трансформер на сервачке заказчика с двумя ядрами и без малейшего признака GPU. А решение, которое работает на вашем компе и не работает на устройствах клиента не будет принято и, соответственно, оплачено."
        ]
     }
      ]
    },
    {
      "id": "12",
      "title": "React: революция использования фигурных скобочек",
      "subtitle": "В этот раз Александр размышляет о том, как простые и понятные привычки можно переосмыслить и пофиксить фигурными скобочками. Бонус: смешная панда, которая задает много вопросов и вечно чем-то недовольна.",
      "img": "https://sun9-53.userapi.com/impg/eW-24xFtX4ETG9YY3qVJKN315Y2Xr2POgb9gMw/mTNAKCMZlHc.jpg?size=912x512&quality=96&sign=c0cf6056a4a7e8ffbeb75593b95edd11&c_uniq_tag=kWMDJwtKfcOtaC3MNBHcNAcJkKZnyz8TzR20JaXRslo&type=album",
      "views": 7800,
      "createdAt": "10 May 2023",
      "userId": "4",
      "type": [
        "ReactJs",
        "Frontend",
        "JS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Вступление",
          "paragraphs": [
              "Хорошо, react. Как много мы используем всего, потому что так исторически сложилось: пишем функции задом наперед (сначала объяви, потом вызывай). Оборачиваем все в стрелочные функции и константы с ними, когда достаточно именованной функции. Этот список можно хорошенько продолжить",
              "В этой статье хотелось бы обсудить несколько привычек, которые есть у нас всех и которые, возможно, пора переосмыслить."
          ]
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Начнем с кастомных хуков, которым надо вернуть результат, в частности пару значений. Классическим примером может быть хук для запроса данных по сети и отслеживания в процессе ли этот запрос сейчас, чтобы добавить на страницу лоадер."
          ]
      },
      {
          "id": "3",
          "type": "CODE",
          "code": "function useClient(clientId) { \n  const [loadedClient, setLoadedClient] = useState(null) \n  const [isLoading, setIsLoading] = useState(false) \n\n  useEffect(() => { \n  const loadClient = async () => { \n  try { \n  setIsLoading(true) \n  const clientData = {} // actual data loading call goes here \n  setLoadedClient(clientData) \n } \n  finally { \n  setIsLoading(false) \n } \n } \n\n loadClient() \n }, [clientId]) \n\n return [loadedClient, isLoading] \n }"
      },
      {
          "id": "4",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "В итоге вызываем его вот как-то так:"
          ]
      },
      {
          "id": "5",
          "type": "CODE",
          "code": "const [loadedClient, isLoading] = useClient(clientId)"
      },
      {
        "id": "6",
        "type": "TEXT",
        "title": "",
        "paragraphs": [
            "А может вот так:"
        ]
    },
    {
        "id": "7",
        "type": "CODE",
        "code": "const [client, isClientLoading] = useClient(clientId)"
    },
    {
      "id": "8",
      "type": "TEXT",
      "title": "",
      "paragraphs": [
          "Кажется, что тут мы руководствуемся паттерном от useState, когда он возвращает нам массив из значения и функции для его обновления, а мы потом деструктурируем массив и получаем все по индексу, даем этому любые имена, круто."
      ]
  },
  {
    "id": "9",
    "type": "TEXT",
    "title": "Почему для useState пришлось сделать именно так?",
    "paragraphs": [
        "Потому, что это библиотечная универсальная функция. Клиенты вызывают её в своих конкретных случаях и хотят давать разные, полезные, говорящие имена."
    ]
},
{
  "id": "10",
  "type": "TEXT",
  "title": "Что же выходит с нашим кастомных хуком useClient?",
  "paragraphs": [
      "Мы следуем чьей-то конвенции, потому что все так делают, а значит это react way и все в таком духе",
      "Но нужна ли нам эта гибкость в плане именования результатов работы этой функции? А если у нас нет TypeScript, то кто поможет заподозрить неладное? А если искать все использования полным поиском по проекту без использования полезных фишек IDE, то много ли мы найдем, если каждый называет как хочет?",
      "Продолжение следует..."
  ]
}
      ]
    },
    {
      "id": "13",
      "title": "Почему Data Science не для вас?",
      "subtitle": "Много раз видели рекламу, на которой вас активно зазывали на курсы по Data Science и обещали золотые горы через несколько месяцев обучения? Наш аналитик данных Мария выразила своё мнение по этому поводу этого...",
      "img": "https://sun9-30.userapi.com/impg/r13cpZ0fRCnmRELB2O_8vXAAaYDyw7k1X8A2og/9RLjap8vwh4.jpg?size=807x807&quality=95&sign=7366f10dfd3f01b4d3b0c2af19b17733&c_uniq_tag=7HGcGK1LAHolX2sODliZZu0fqpCldtdKM1I3dS322SE&type=album",
      "views": 9200,
      "createdAt": "20 Mar 2023",
      "userId": "4",
      "type": [
        "IT",
        "Big Data",
        "Data Engineering"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/2bb/b2b/7c9/2bbb2b7c920bfc76c0109b41f8035adc.png",
          "title": ""
      },
      {
          "id": "2",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
              "Data Science сейчас во многом благодаря активному маркетингу становится очень популярной темой. Быть датасаентистом – модно и, как говорят многие рекламки, которые часто попадаются на глаза, не так уж и сложно. Ходят слухи, что работодатели стоят в очереди за возможность взять человека с курсов. Получить оффер на работу крайне легко, ведь в ваши обязанности будет входить требование данных от заказчика (как обычно говорят, чем больше данных – тем лучше) и закидывать их в искусственный интеллект, который работает по принципу черного ящика. Кстати, еще и платят немереное количество денег за всё это.",
              "В этой душераздирающей статье решили попробовать отговорить людей, которые готовы оставить кучу денег за курсы по Data Science, браться за это дело, а может быть и помочь определиться с тем, что на самом деле стоит сделать, чтобы встать на путь истинный."
          ]
      },
      {
        "id": "3",
        "type": "TEXT",
        "title": "Почему всё-таки Data Science не для вас?",
        "paragraphs": [
            "1. Data Science – для усидчивых. Над одной и той же задачей придется сидеть очень долго. Пока найдешь все необходимое в данных, пока найдешь оптимальный способ обработки данных, пока погрузишься в область, пока переберешь все модельки, которые могут потенциально хорошо решить эту задачу… А еще надо дождаться, пока модель обучится - это ж целая вечность пройдет! Потом еще выясняется, что у модели метрики недостаточно хорошие, и весь этот путь нужно пройти заново, но с новыми идеями.",
            "Хватит ли вам умения занять себя другими делами во время обучения модели? Вряд ли проджект будет в восторге, если узнает, что несколько дней вы пили кофе, пока модель обучалась. Хватит ли вам терпения перебирать идеи до тех пор, пока точность модели не достигнет нужного бизнесу числа?",
            "2. Математика останавливается не на 2+2 и даже не на интегралах. Вам точно понадобятся знания по мат.статистике, линейной алгебре, теории вероятностей. Нет, вам не хватит встроенных в библиотечки функций. Может быть для какого-то поверхностного анализа и составления простецкой модели – да, но чтобы лучше анализировать огромные массивы данных, в математике действительно нужно разбираться.",
            "3. Вам нужно знать Python/R/Scala или еще что-то, на чем вы соберете ваше решение. Вы не бэкенд-разработчик, но вам нужно приготовить умную штуку, которую можно будет встроить в прод. Нужно будет составлять POC-шки, функции предобработки данных, которые затем будет имплементировать бэкенд-разраб. Необходимо уметь общаться с бэкендерами на их языке, если им понадобится помощь при внедрении вашего решения",
            "4. Еще немного о встраивании модели в прод: вам нужно интересоваться тем, на каком железе будет запущена модель. Ну не получится запустить трансформер на сервачке заказчика с двумя ядрами и без малейшего признака GPU. А решение, которое работает на вашем компе и не работает на устройствах клиента не будет принято и, соответственно, оплачено."
        ]
     }
      ]
    }
  ],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "admin",
      "role": "ADMIN",
      "avatar": "https://img.freepik.com/free-vector/mysterious-mafia-man-smoking-cigarette_52683-34828.jpg?w=826&t=st=1700173085~exp=1700173685~hmac=5d18d7cb3b79c038be94cda5f1198b117535b594849f530b5957b8589051c29f"
    },
    {
      "id": "2",
      "username": "Adam Denisov",
      "password": "123",
      "role": "USER",
      "avatar": "https://img.freepik.com/free-photo/young-bearded-man-with-striped-shirt_273609-5677.jpg?w=1380&t=st=1700173116~exp=1700173716~hmac=4dc5c6eb9c6928639faaee590a49b96e544ff5dc77a10e596d7a9e3946b7ad72"
    },
    {
      "id": "3",
      "username": "Abbie Wilson",
      "password": "123",
      "role": "USER",
      "avatar": "https://img.freepik.com/free-photo/one-young-woman-listening-music-with-headphones-generated-by-ai_188544-10009.jpg?t=st=1700173146~exp=1700176746~hmac=e6c11ab2aaabd9664265b94ec09672a964a8b056a22df1698606b690e7929de6&w=1380"
    },
    {
      "id": "4",
      "username": "TourmalineCore",
      "password": "123",
      "role": "USER",
      "avatar": "https://sun9-74.userapi.com/impg/rDNpAVdecXSKf57ngdP96WmhYnU3o2nbxkUJxQ/GPbX3FHYybs.jpg?size=1300x1300&quality=95&sign=77a223ae095c9aac66ccf33f1b21cb8d&type=album"
    }
  ],
  "profile": [
    {
      "id": "1",
      "firstname": "Artem",
      "lastname": "Shabanov",
      "age": 22,
      "currency": "RUB",
      "country": "Russia",
      "city": "Chelyabinsk",
      "username": "admin",
      "avatar": "https://img.freepik.com/free-vector/mysterious-mafia-man-smoking-cigarette_52683-34828.jpg?w=826&t=st=1700173085~exp=1700173685~hmac=5d18d7cb3b79c038be94cda5f1198b117535b594849f530b5957b8589051c29f"
    },
    {
      "id": "2",
      "firstname": "Adam",
      "lastname": "Denisov",
      "age": 32,
      "currency": "USD",
      "country": "USA",
      "city": "Miami",
      "username": "Adam Denisov",
      "avatar": "https://img.freepik.com/free-photo/young-bearded-man-with-striped-shirt_273609-5677.jpg?w=1380&t=st=1700173116~exp=1700173716~hmac=4dc5c6eb9c6928639faaee590a49b96e544ff5dc77a10e596d7a9e3946b7ad72"
    },
    {
      "id": "3",
      "firstname": "Abbie",
      "lastname": "Wilson",
      "age": 22,
      "currency": "EUR",
      "country": "Italy",
      "city": "Rome",
      "username": "Abbie Wilson",
      "avatar": "https://img.freepik.com/free-photo/one-young-woman-listening-music-with-headphones-generated-by-ai_188544-10009.jpg?t=st=1700173146~exp=1700176746~hmac=e6c11ab2aaabd9664265b94ec09672a964a8b056a22df1698606b690e7929de6&w=1380"
    }
  ]
}